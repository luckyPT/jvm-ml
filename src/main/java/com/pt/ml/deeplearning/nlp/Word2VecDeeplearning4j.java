package com.pt.ml.deeplearning.nlp;

import org.deeplearning4j.models.embeddings.loader.WordVectorSerializer;
import org.deeplearning4j.models.embeddings.wordvectors.WordVectors;
import org.nd4j.linalg.api.ndarray.INDArray;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * NewsWordVector.txt格式
 * drunk -0.037462133914232254 0.056055109947919846 -0.03955582529306412 -0.031007682904601097 0.00497626094147563 0.06134483590722084 0.09213417768478394 -0.057349205017089844 -0.02404395304620266 -0.12656623125076294 0.10535473376512527 -0.05796556919813156 -0.059598952531814575 0.02029532939195633 -0.11265023052692413 -0.006029732525348663 -0.010522741824388504 -0.04601519554853439 -0.03791830316185951 0.07676438987255096 0.0782104954123497 0.062134988605976105 0.15178030729293823 -0.021198531612753868 0.023137543350458145 -0.11282192915678024 0.15134896337985992 -0.09386646002531052 0.044414326548576355 0.017291219905018806 -0.049611978232860565 -0.0466131865978241 0.0683571919798851 -0.06859109550714493 0.08142756670713425 -0.09402767568826675 -0.05005168914794922 -0.012477814219892025 -0.0194767527282238 0.10297096520662308 -0.1274998039007187 0.0479726605117321 0.020439783111214638 -0.019654827192425728 0.020913140848279 -0.031130241230130196 -0.12519024312496185 0.0067892493680119514 0.11976417154073715 -0.064801886677742 0.0014165143948048353 -0.018481725826859474 -0.043975479900836945 -0.03157979995012283 -0.01334407925605774 -0.07039199769496918 0.15577580034732819 -0.0529395192861557 -0.0340501144528389 -0.13216082751750946 -0.0033041287679225206 -0.03419924154877663 -0.03659016638994217 0.07451377809047699 0.17803329229354858 -0.024317637085914612 0.029349828138947487 0.07903876155614853 -0.13747532665729523 -0.21080170571804047 -0.05029888078570366 -0.07651214301586151 0.028010526672005653 0.03356079012155533 0.07348653674125671 -0.014409464783966541 0.12449961155653 0.005072843283414841 0.010629073716700077 0.11436748504638672 0.13886897265911102 -0.07989829778671265 0.060776375234127045 0.026316188275814056 -0.10413920134305954 0.13413172960281372 -0.09677758067846298 -0.08264253288507462 0.06512409448623657 -0.03491765260696411 0.11777235567569733 0.054730530828237534 0.07728148251771927 -0.12526433169841766 0.03654592111706734 0.025915658101439476 -0.0402974933385849 -0.04532109946012497 0.005950693506747484 -0.01543462835252285
 * pick -0.036976657807826996 0.022506188601255417 0.031936164945364 0.024530215188860893 0.02056061290204525 0.05815414711833 0.00819111056625843 -0.012819454073905945 -0.020006844773888588 -0.04962346702814102 -0.009183411486446857 -0.024959206581115723 -0.0022090564016252756 0.08817558735609055 -0.06908334046602249 -0.10031162947416306 0.018541879951953888 0.01756168343126774 -0.01860898733139038 -0.04641801491379738 -0.011929651722311974 0.06608644872903824 0.05686855688691139 -0.07112660259008408 0.020340686663985252 -0.004581371787935495 0.05464290827512741 0.028209954500198364 0.04261106997728348 -0.06474378705024719 -0.12874731421470642 -0.0024990106467157602 0.11425624042749405 -0.08555218577384949 0.07452370971441269 -0.07314521074295044 -0.05316053330898285 -0.005780960898846388 -0.006289700977504253 0.09428144246339798 -0.1315440982580185 0.056737203150987625 0.034820497035980225 -0.050188448280096054 -0.06932470947504044 0.05655490979552269 -0.06365876644849777 0.07280176132917404 0.10405256599187851 -0.01831958256661892 -0.024084830656647682 -0.06342820823192596 -0.02768186293542385 -0.038212794810533524 -0.06638013571500778 -0.010768616572022438 0.05489003658294678 0.0393218956887722 -0.06677756458520889 -0.06974512338638306 -0.013247540220618248 -0.015282015316188335 -0.0026067954022437334 0.011549437418580055 0.0830913856625557 0.010403544642031193 0.0014712787233293056 0.003709010314196348 0.038156189024448395 0.05354610085487366 -0.0680575966835022 -0.004811421502381563 -0.07532947510480881 -0.03565904125571251 -0.009724080562591553 0.031269412487745285 -0.030924150720238686 0.0667370930314064 0.04613053426146507 0.07531915605068207 0.10391438752412796 -0.11188120394945145 0.00971065554767847 0.05412145331501961 -0.0774211585521698 0.062308549880981445 -0.005342657212167978 0.0802120491862297 0.023412508890032768 0.0020401524379849434 0.018511686474084854 -0.01257047988474369 0.07916661351919174 -0.07183272391557693 -0.09119942784309387 -0.06667710840702057 0.003810780355706811 0.06009611114859581 0.06349701434373856 -0.08859564363956451
 */
public class Word2VecDeeplearning4j implements IWord2Vec {
    private static final WordVectors wordVectors = WordVectorSerializer
            .readWord2VecModel(new File("/home/panteng/IdeaProjects/jvm-ml/dataset/word2vec-nlp-tutorial/fastText/skip-gram.model.vec"));
    private static final int size = wordVectors.getWordVector(wordVectors.vocab().wordAtIndex(0)).length;

    @Override
    public int getVecSize() {
        return size;
    }

    @Override
    public INDArray getVec(String word) {
        return wordVectors.getWordVectorMatrix(word);
    }

    @Override
    public boolean hasWords(String word) {
        return wordVectors.hasWord(word);
    }

    public static void main(String[] args) {
        //获取最近的词
        ArrayList<String> s = (ArrayList<String>) wordVectors.wordsNearest("night", 10);
        s.forEach(System.out::println);

        //获取词语集合的平均值
        List<String> words = new ArrayList<>();
        words.add("star");
        words.add("style");
        words.add("good");
        System.out.println(wordVectors.getWordVectorsMean(words));

    }
}
